name: SonarCloud Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      
      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Begin SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"pierre-gaborieau_pga_activity_tools" \
            /o:"pierre-gaborieau" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/Migrations/**,**/Program.cs,**/*Dto.cs"
      
      - name: Build
        run: dotnet build --no-restore
      
      - name: Test with coverage (XPlat)
        run: |
          dotnet test --no-build --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      
      - name: Move coverage file to root
        run: |
          echo "üîç Searching for coverage files..."
          find TestResults -name "coverage.opencover.xml" -type f
          
          COVERAGE_FILE=$(find TestResults -name "coverage.opencover.xml" -type f | head -1)
          
          if [ -z "$COVERAGE_FILE" ]; then
            echo "‚ùå ERROR: No coverage file found!"
            echo "TestResults content:"
            ls -R TestResults/
            exit 1
          fi
          
          echo "‚úÖ Coverage file found: $COVERAGE_FILE"
          cp "$COVERAGE_FILE" ./coverage.opencover.xml
          
          echo ""
          echo "üìä Coverage file info:"
          ls -lh coverage.opencover.xml
          
          echo ""
          echo "üîç Checking content:"
          echo "Total lines:"
          wc -l coverage.opencover.xml
          
          echo ""
          echo "Files covered:"
          grep -o 'fullPath="[^"]*"' coverage.opencover.xml | head -20
          
          echo ""
          echo "Checking for VersionService:"
          if grep -q "VersionService" coverage.opencover.xml; then
            echo "‚úÖ VersionService found in coverage"
            grep "VersionService" coverage.opencover.xml | head -5
          else
            echo "‚ö†Ô∏è VersionService not found in coverage"
          fi
      
      - name: End SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"